service:
  name: watch-with-me

package:
  exclude:
    - .git/**
    - .gitignore

plugins:
  - serverless-iam-roles-per-function # allows to set permissions per function
  - serverless-webpack # add the ability to use typescript
  - serverless-pseudo-parameters # allows to use pseudo parameters such as Account ID

custom:
  prefix: ${self:service.name}-${self:provider.stage}
  roomTable: ${self:custom.prefix}-RoomTable
  event:
    eventBus: ${self:custom.prefix}-event
    source: com.watch-with-me

provider:
  profile: lesgars-watch-with-me
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs12.x
  region: eu-west-3
  memorySize: 256 # optional, in MB, default is 1024
  timeout: 3 # optional, in seconds, default is 6
  # By default serverless wants to create a single package that contains all the lambdas
  # We want the lambdas to each be in their own package so that they can contain different files
  # To achieve this we tell serverless to package the lambdas individually and by default to exclude all files
  # Within the individual function definitions we then include the file(s) that we want which overrides the global exclude
  package:
    individually: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource:
        - 'arn:aws:execute-api:*:*:*'
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource:
        - 'Fn::GetAtt': [EventBus, Arn]
  environment:
    ROOM_TABLE: ${self:custom.roomTable}
    MEDIA_EVENT_BUS: ${self:custom.event.eventBus}
    EVENT_SOURCE: ${self:custom.event.source}

functions:
  connect:
    handler: functions/connect.main
    iamRoleStatementsInherit: true
    events:
      - websocket:
          route: $connect
          routeResponseSelectionExpression: $default
  disconnect:
    handler: functions/disconnect.main
    iamRoleStatementsInherit: true
    events:
      - websocket:
          route: $disconnect
          routeResponseSelectionExpression: $default
  broadcast:
    handler: functions/broadcast.main
    iamRoleStatementsInherit: true
    events:
      - eventBridge:
          eventBus: arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:event-bus/${self:custom.event.eventBus}
          pattern:
            source:
              - ${self:custom.event.source}
  join_room:
    handler: functions/join_room.main
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [RoomTable, Arn]
    events:
      - websocket:
          route: join-room
          routeResponseSelectionExpression: $default
  media_event:
    handler: functions/update_watcher_state.main
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [RoomTable, Arn]
    events:
      - websocket:
          route: update-watcher-state
          routeResponseSelectionExpression: $default
  update_sync_intent:
    handler: functions/update_sync_intent.main
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - 'Fn::GetAtt': [RoomTable, Arn]
    events:
      - websocket:
          route: update-sync-intent
          routeResponseSelectionExpression: $default
  default:
    handler: handler.defaultHandler
    events:
      - websocket:
          route: $default
          routeResponseSelectionExpression: $default
  auth:
    handler: auth.auth

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/eventBus.yml)}
